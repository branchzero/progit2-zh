=== 图形界面

(((GUIs)))(((Graphical tools)))
Git 的原生环境在终端下。
在那里，你可以体验到最新的特性，也只有在那里，你才能尽情发挥 Git 的全部力量。
并不是所有任务都适用纯文本界面；有时候，你确实需要一个可视化的展示方式，而且一些用户更习惯于可点击界面。

需要注意的是，应该针对不同的工作流，量体裁衣地选择不同的界面。
一些客户端的作者为了支持某种他认为高效的工作方式，只精心挑选了 Git 功能集中的一小部分。
每种工具都有其特定的适用场合，从这个角度来看，不能说某种工具比其它的``更好''。
还有请注意，没有什么事情是图形界面客户端可以做而命令行客户端不能做的；命令行依旧是你可以完全操控仓库并发挥出最大力量的地方。

==== `gitk` 和 `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
在安装 Git 的同时，你也同时拥有了它的可视化工具，`gitk` 和 `git-gui`。

`gitk` 是一个图形化的历史记录查看器。
你可以把它当作是基于 `git log` 和 `git grep` 命令的一个强大的图形化界面。
当你需要查找过去发生的某次事件，或可视化你的项目历史时，该工具会派上用场。

使用 Gitk 的最简方式就是从命令行调用。
只需 `cd` 到一个 Git 仓库，然后输入：

[source,console]
----
$ gitk [git log options]
----

Gitk 接受许多命令行选项，其中的大部分都直接传递给底层的 `git log` 来执行。
`--all` 可能是这其中最有用的一个, 它告诉 gitk 去显示来自任意 _任何_ 引用的提交，而不仅仅从 HEAD 下获取。
Gitk 的界面看起来长这样：

.`gitk` 历史查看器。
image::images/gitk.png[`gitk` 历史查看器。]

顶部看起来就和执行 `git log --graph` 命令的输出结果有些相似；每个点代表一次提交，线代表父子关系，而彩色的方块则用来表示引用。
黄点代表 HEAD，红点则代表了尚未提交的本地改变。
底部则是当前选中的提交的视图；评论和补丁显示在左侧，摘要显示在右侧。
中间则是用来搜索历史记录的控件集。

与之相比，`git-gui` 则主要是一个制作提交的工具。
打开它的最简方法也是从命令行调用：

[source,console]
-----
$ git gui
-----

它的界面长这个样子：

.`git-gui` 提交工具。
image::images/git-gui.png[`git-gui` 提交工具。]

左侧是索引区；未暂存的修改显示在上方，已暂存的修改显示在下方。
你可以通过点击图标来将文件在暂存状态与未暂存状态之间进行切换，你也可以通过选中一个文件名来查看它。

右上方为差异视图，展示了当前所选文件的变动内容。
你可以通过右击某一区块或行将这一区块或行放入暂存区。

右下方则是日志与操作区。
在文本框中键入日志然后点击 ``Commit'' 按钮来执行和 `git commit` 作用相似的功能。
如果你想要修订上一次提交, 可以选中 ``Amend'' 开关按钮，上次提交的内容就会显示在 ``暂存区''。
然后你就可以简单的对修改进行暂存或取消暂存的操作，更新提交日志，然后再次点击 ``Commit'' 以该新提交来替代旧提交。

`gitk` 和 `git-gui` 就是针对某种任务设计的工具的两个例子。
它们分别为了不同的目的（即查看历史和制作提交）而进行了精简，去除了无用功能。


==== Mac 和 Windows 中的 GitHub 客户端

(((GitHub for Mac)))(((GitHub for Windows)))
GitHub 发布了两个面向工作流的 Git 客户端：Windows 版和 Mac 版。
它们很好的展示了一个面向工作流的工具应该是什么样子——专注于提升那些常用的功能以便更好协作，而不是追求实现 Git 的 _所有_ 功能.
它们看起来像这样：

.GitHub Mac 客户端。
image::images/github_mac.png[GitHub Mac 客户端。]

.GitHub Windows 客户端。
image::images/github_win.png[GitHub Windows 客户端。]

我们在设计的时候就努力将二者的外观和使用体验保持一致，因此本章会把它们当做同一产品来对待。
我们并不会详细介绍这些工具（因为它们本身也有文档），但也已准备了 ``变更'' 视图的快速导览 （你会花费大部分时间使用该窗口）

* 左侧是正在追踪的仓库的列表；你可以通过点击该区域上方的 ``+'' 图标来添加一个仓库（既可以通过 Clone，也可以从本地添加）。
* 中间是提交-输入区，你可以在这里输入提交日志，以及选择需要被提交的文件。
  （在 Windows 上，提交历史就显示在这个区域的下方；在 Mac 上，提交历史有一个单独的窗口）
* 右侧是差异浏览区，它会显示在工作目录中被修改的项目，或被选中提交中的修改。
* 最后需要注意的是位于右上角的 ``Sync'' 按钮，你主要通过这个按钮来进行网络上的交互。

[注意]
====
你不需要注册 GitHub 账号就可以使用这些工具。
尽管它们被设计来体现 GitHub 的服务与推荐工作流，他们也能够愉快地在任意仓库下工作，并且和任意 Git 主机进行网络操作。
====

===== 安装

GitHub 的 Windows 客户端可以从 https://windows.github.com[] 下载，Mac 客户端可以从 https://mac.github.com[]下载。
第一次打开软件时，它们会引导你进行所有的首次使用设置，例如设置你的姓名和电子邮件，它还会智能地帮你调整一些常用的默认设置，例如凭证缓存和 CRLF 的处理方式。

它们都是``绿色软件''——当应用打开时，下载和安装升级包都是在后台完成的。
为方便起见，它们还提供了一份打包版的 Git，也也就意味着你无需担心再次进行手动升级。
Windows 的客户端还提供了一个快捷方式去启动装有 Posh-git 插件的 Powershell，我们会在本章节的后半部分进行讲解。

接下来我们给它设置一些工作仓库。
客户端会显示你在 GitHub 上有权限操作的仓库列表，并且可以一步克隆他们。
如果你本地已经建立了仓库，只需要用鼠标把它从 Finder 或 Windows 资源管理器拖进 GitHub 客户端窗口，就会被包含在左侧的仓库列表里面。

===== 推荐的工作流

安装并配置好以后，你就可以使用 GitHub 客户端来执行一些常见的 Git 任务。
该工具所推荐的工作流有时也被叫做 ``GitHub 流''。
我们在 <<_github_flow>> 一节中对此展开详细介绍，其要点是 (a) 你会提交到一个分支，(b) 你需要经常与远程仓库保持同步。

两个平台上的客户端在分支管理上有所不同。
在 Mac 中，创建分支的按钮在窗口的上方：

.Mac 中的``创建分支''按钮。
image::images/branch_widget_mac.png[Mac 中的``创建分支''按钮。]

在 Windows 中，你可以通过在分支切换挂件中输入新分支的名称来完成创建：

.在 Windows 中创建分支。
image::images/branch_widget_win.png[在 Windows 中创建分支。]

分支创建好以后，新建提交就变得相当直接了。
现在在工作目录中做一些修改，然后切换到 GitHub 客户端窗口，改动过的文件将会被显示出来。
输入提交日志，选中那些需要被包含在本次提交中的文件，然后点击 ``Commit'' 按钮（ctrl-enter 或 ⌘-enter）。

``同步'' 功能是你通过网络和其它仓库交互的主要途径。
push、fetch、merge 和 rebase 在 Git 内部是一连串独立的操作，而 GitHub 客户端将所有这些操作合并成了一个多步骤功能。
当你点击同步按钮时会发生如下的事件：

. `git pull --rebase`.
  如果上述命令由于存在合并冲突而失败，则会回落至 `git pull --no-rebase`。
. `git push`.

如果以该种方式工作，以上就是最常用的一系列网络命令，因此将它们合而为一条命令节省了很多时间。

===== 小结

这些工具是为其各自针对的工作流所量身定做的。
开发者和非开发者可以快速地在项目上进行协作，许多适用这种工作流的最佳实践塑造了这些工具。
但是，如果你的工作流有所不同，或需要控制网络操作的时间和方式，那么建议你考虑一下其它客户端或者命令行。


==== 其它图形界面

除此之外，还有许多其它的图形化 Git 客户端，其中既有单一功能的定制工具，也有试图提供 Git 所有功能的复杂应用。
Git 官方网站整理了一份时下最流行的客户端清单 http://git-scm.com/downloads/guis[]。
在 Git 的维基网站上还可以看到一份更全的清单 https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
