[[_getting_a_repo]]
=== 获取 Git 仓库

有两种获取 Git 项目仓库的主要方式。
第一种是将已有项目或目录导入为 Git 仓库；
第二种是从其它服务器克隆一个已存在的 Git 仓库。

==== 在已存在目录中初始化仓库

如果你打算使用 Git 来对已有项目进行追踪，你需要进入项目目录并输入：

[source,console]
----
$ git init
----

该命令将创建一个名为 `.git` 的子目录，该目录包含初始化 Git 仓库所必须的所有文件 —— Git 仓库的骨架。
但在这时，你项目里的文件还没有被追踪。
(参见 <<_git_internals>> 来了解更多关于创建的 `.git` 文件夹中所包含的文件。)(((git commands, init)))

如果在一个已存在文件的文件夹（而非空文件夹）中进行版本控制，你应该开始追踪这些文件并进行初始提交。
可以通过 `git add` 命令来指定所需的文件来进行追踪，然后执行 `git commit` ：

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

稍后我们再逐一解释这些指令的行为。
现在，你已经得到了一个存在被追踪文件与初始提交的 Git 仓库。

[[_git_cloning]]
==== 克隆已有的仓库

如果你想获得一份已存在的 Git 仓库的副本，比如说，一个你想进行贡献的开源项目，这时你所需要的命令就是 `git clone` 。
如果你对其它版本控制系统（例如 Subversion ）很熟悉，请留心一下你所使用的命令是 “clone” 而不是 “checkout” 。
这是 Git 与其它版本控制系统的一个重大差别，Git 克隆的是服务器上几乎所有的数据，而非仅仅是工作副本。
当你执行 `git clone` 命令的时候，默认配置下项目中的每个文件的每个版本都将被拉取下来。
事实上，如果你的服务器磁盘发生损坏，通常可以使用几乎任何一个客户端下的副本来重建服务器上的仓库（虽然可能会丢失某些服务端的钩子设置，但是所有的版本数据仍然存在，详见 <<_git_on_the_server>> ）。

克隆仓库的命令是 `git clone [url]` 。(((git commands, clone)))
比如，要克隆 Git 的链接库 libgit2，可以用下面的命令：

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

这会在当前目录下创建一个名为 ``libgit2'' 的目录，并在该目录下初始化一个 `.git` 文件夹，拉取所有该仓库的数据，然后从中检出最新版本的工作副本。
如果你进入到这个新建的 `libgit2` 文件夹，你会发现所有的项目文件已经存在，供后续的开发或使用。
如果你想在克隆远程仓库的时候，自定义本地目录的名字，你可以在后一个命令行选项中进行指定：

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

这将执行与上一条命令相同的操作，但目标目录名变为了 `mylibgit`。

Git 支持多种传输协议。
上面的例子使用 `https://` 协议，不过你也可以使用 `git://` 协议或 SSH 传输协议，比如 `user@server:path/to/repo.git` 。
<<_git_on_the_server>> 将会介绍所有服务器可以设定的有关访问 Git 仓库的可用选项，以及每个选项的利弊。
